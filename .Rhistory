# Removendo colunas com um valor duplicado
distinct(mtcars, carb)
# Escolhendo fileiras pela posição
slice(mtcars, 10:15)
# Selecionando fileiras randômicas
slice_sample(mtcars, n = 5, replace = TRUE)
# Selecionando fileiras randômicas
slice_sample(mtcars, n = 5, replace = TRUE)
# Selecionando fileiras randômicas
slice_sample(mtcars, n = 5, replace = TRUE)
# Selecionando fileiras randômicas
set.seed(42)
slice_sample(mtcars, n = 5, replace = TRUE)
# Selecionando fileiras randômicas
set.seed(42)
slice_sample(mtcars, n = 5, replace = TRUE)
# Selecionando fileiras randômicas
set.seed(42)
slice_sample(mtcars, n = 5, replace = TRUE)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
# Selecionando fileiras randômicas
mtcars <- mtcars
slice_sample(mtcars, n = 15, replace = TRUE)
x_test <- slice_sample(mtcars, n = 15, replace = TRUE)
y_train <- mtcars - x_test
x_test <- slice_sample(mtcars, n = 15, replace = TRUE)
x_test
# Para filtrar os maiores ou menores valores da base
slice_max(mtcars, mpg, prop = 0.10)
slice_max
slice_max
# Para filtrar os maiores ou menores valores da base
slicemax <- slice_max(mtcars, mpg, prop = 0.10)
slicemax
slicemin <- slice_min(mtcars, mpg, prop = 0.10)
slicemin
# Para filtrar os maiores ou menores valores da base
slicemax <- slice_max(mtcars, mpg, prop = 0.30)
,slicemax
# Para filtrar os maiores ou menores valores da base
slicemax <- slice_max(mtcars, mpg, prop = 0.30)
slicemax
slicemin <- slice_min(mtcars, mpg, prop = 0.40)
slicemin
# Ordenar a variavel do mínimo ao máximo (ascendente)
arangemtcars <- arrange(mtcars, mpg)
arangemtcars
plot(mtcars$mpg)
plot(mtcars$mpg)
plot(arangemtcars)
plot(arangemtcars$mpg)
plot(mtcars$mpg)
plot(arangemtcars$mpg)
# Ordenar a variavel do mínimo ao máximo (ascendente)
arangemtcars <- arrange(mtcars, desc(mpg))
arangemtcars
plot(mtcars$mpg)
plot(mtcars$mpg)
plot(arangemtcars$mpg)
# Chama uma coluna da base de dados
pull(mtcars, wt)
pull(mtcars, var = -6)
mtcars
pull(mtcars, var = -1)
mtcars
pull(mtcars, var = -1)
# Chama diversas colunas específicas como uma tabela
select(mtcars, mpg, wt, hp)
# Chama diversas colunas específicas como uma tabela
df_selecionada <- select(mtcars, mpg, wt, hp)
df_selecionada
# Mover colunas para outras posições
mtcars
relocate(mtcars, mpg, cyl, .after = last_col())
# Mover colunas para outras posições
mtcars
relocate(mtcars, mpg, cyl, .before = 6)
relocate(mtcars, mpg, cyl, .before = 7)
# Mover colunas para outras posições
mtcars
# Mover colunas para outras posições
mtcars
relocate(mtcars, mpg, cyl, .before = -1)
relocate(mtcars, mpg, cyl, .before = -1)
relocate(mtcars, mpg, cyl, .before = 7)
# mutate(.data, ., .before = NULL, .after = NULL)
# Compute new column(s). Also add_column(),
# add_count(), and add_tally().
mutate(mtcars, gpm = 1/mpg)
mtcars$divummpg <- mutate(mtcars, gpm = 1/mpg)
mtcars
mutate(mtcars, gpm = 1/mpg)
# mutate(.data, ., .before = NULL, .after = NULL)
# Compute new column(s). Also add_column(),
# add_count(), and add_tally().
mtcars
# mutate(.data, ., .before = NULL, .after = NULL)
# Compute new column(s). Also add_column(),
# add_count(), and add_tally().
mtcars
# mutate(.data, ., .before = NULL, .after = NULL)
# Compute new column(s). Also add_column(),
# add_count(), and add_tally().
mtcars <- mtcars
mtcars
library(Rcpp)
library(RcppArmadillo)
library(RcppEigen)
remove.packages("Rcpp", lib="~/R/win-library/4.1")
remove.packages("RcppArmadillo", lib="~/R/win-library/4.1")
remove.packages("RcppEigen", lib="~/R/win-library/4.1")
# Teste
install.packages('Rcpp')
# pacotes utilizados
library(openxlsx)
library(dplyr)
library(mice)
library(VIM)
library(lattice)
library(ggplot2)
library(hrbrthemes)
library(Rcpp)
library(roxygen2)
library(devtools)
library(digest)
library(lme4)
library(sjPlot)
library(reshape2)
library(glmmTMB)
#####
##### TEXTO DA DUVIDA
#####
# set wd
setwd("C:/Users/Cacau Pastorello/Desktop/NHANES_DEBORA")
# call data
NH_SG <- read.xlsx("art1banco3.xlsx")
summary(NH_SG)
str(NH_SG)
#### A partir deste momento, as analises foram feitas
#### em bancos com os dados faltantes de gestação
#### e sem os dados faltantes de gestação
# SEM NA GEST -Transformando medidas em variaveis de tipo numerica
NH_SG$WHD010 <- as.numeric(NH_SG$WHD010)
NH_SG$WHD020 <- as.numeric(NH_SG$WHD020)
NH_SG$WHD050 <- as.numeric(NH_SG$WHD050)
NH_SG$WHD110 <- as.numeric(NH_SG$WHD110)
NH_SG$WHD120 <- as.numeric(NH_SG$WHD120)
NH_SG$WHD130 <- as.numeric(NH_SG$WHD130)
NH_SG$WHD140 <- as.numeric(NH_SG$WHD140)
NH_SG$WHQ150 <- as.numeric(NH_SG$WHQ150)
summary(NH_SG)
str(NH_SG)
# Transformação de valores listados como faltantes para NA
NH_SG$WHD010[NH_SG$WHD010 == 9999] <- NA
NH_SG$WHD010[NH_SG$WHD010 == 99999] <- NA
NH_SG$WHD010[NH_SG$WHD010 == 77777] <- NA
NH_SG$WHD010[NH_SG$WHD010 == 7777] <- NA
NH_SG$WHD020[NH_SG$WHD020 == 9999] <- NA
NH_SG$WHD020[NH_SG$WHD020 == 7777] <- NA
NH_SG$WHD020[NH_SG$WHD020 == 99999] <- NA
NH_SG$WHD020[NH_SG$WHD020 == 77777] <- NA
NH_SG$WHD050[NH_SG$WHD050 == 99999] <- NA
NH_SG$WHD050[NH_SG$WHD050 == 9999] <- NA
NH_SG$WHD050[NH_SG$WHD050 == 7777] <- NA
NH_SG$WHD050[NH_SG$WHD050 == 77777] <- NA
NH_SG$WHD110[NH_SG$WHD110 == 9999] <- NA
NH_SG$WHD110[NH_SG$WHD110 == 7777] <- NA
NH_SG$WHD110[NH_SG$WHD110 == 99999] <- NA
NH_SG$WHD110[NH_SG$WHD110 == 77777] <- NA
NH_SG$WHD120[NH_SG$WHD120 == 7777] <- NA
NH_SG$WHD120[NH_SG$WHD120 == 9999] <- NA
NH_SG$WHD120[NH_SG$WHD120 == 77777] <- NA
NH_SG$WHD120[NH_SG$WHD120 == 99999] <- NA
NH_SG$WHD130[NH_SG$WHD130 == 9999] <- NA
NH_SG$WHD130[NH_SG$WHD130 == 7777] <- NA
NH_SG$WHD130[NH_SG$WHD130 == 99999] <- NA
NH_SG$WHD130[NH_SG$WHD130 == 77777] <- NA
NH_SG$WHD140[NH_SG$WHD140 == 77777] <- NA
NH_SG$WHD140[NH_SG$WHD140 == 99999] <- NA
NH_SG$WHD140[NH_SG$WHD140 == 9999] <- NA
NH_SG$WHD140[NH_SG$WHD140 == 7777] <- NA
NH_SG$WHQ150[NH_SG$WHQ150 == 77777] <- NA
NH_SG$WHQ150[NH_SG$WHQ150 == 7777] <- NA
NH_SG$WHQ150[NH_SG$WHQ150 == 99999] <- NA
NH_SG$WHQ150[NH_SG$WHQ150 == 9999] <- NA
NH_SG$dmdmartl[NH_SG$dmdmartl == 99] <- NA
NH_SG$dmdmartl[NH_SG$dmdmartl == 77] <- NA
NH_SG$indhhinc[NH_SG$indhhinc == 77] <- NA
NH_SG$indhhinc[NH_SG$indhhinc == 99] <- NA
NH_SG$dmdeduc2[NH_SG$dmdeduc2 == 9] <- NA
summary(NH_SG)
str(NH_SG)
# altura de 10 anos(WHD130) atrás faltante receberá altura atual referida(WHD010)
NH_base_altura10anos_SG <- NH_SG
NH_base_altura10anos_SG$WHD130 <- ifelse(is.na(NH_SG$WHD130),
NH_SG$WHD010, NH_SG$WHD130)
summary(NH_SG$WHD130)
summary(NH_base_altura10anos_SG$WHD130)
# porcentagem de valores faltantes
round(mean(is.na(NH_base_altura10anos_SG$dmdeduc2)),digits=3)# 1% - imputação
round(mean(is.na(NH_base_altura10anos_SG$dmdmartl)),digits=3)# 1% - imputação
round(mean(is.na(NH_base_altura10anos_SG$indhhinc)),digits=3)# 6.2% - imputação
round(mean(is.na(NH_base_altura10anos_SG$ridexprg)),digits=3)# 72,6% - imputação
round(mean(is.na(NH_base_altura10anos_SG$WHD010)),digits=3)# 2.1% - imputação
round(mean(is.na(NH_base_altura10anos_SG$WHD020)),digits=3)# 1.6% - imputação
round(mean(is.na(NH_base_altura10anos_SG$WHD050)),digits=3)# 1.8% - imputação
round(mean(is.na(NH_base_altura10anos_SG$WHD120)),digits=3)# 4.4% - imputação
round(mean(is.na(NH_base_altura10anos_SG$WHD130)),digits=3)# 2% - imputação
round(mean(is.na(NH_base_altura10anos_SG$WHQ150)),digits=3)# 2% - Acima
round(mean(is.na(NH_base_altura10anos_SG$WHD140)),digits=3)# 1.8% - Acima
round(mean(is.na(NH_base_altura10anos_SG$WHD110)),digits=3)# 22.9 - Acima
#retirando faltantes de valor maior do que 10%
NH_filtro_narel_SG_3 <- NH_base_altura10anos_SG[!is.na(NH_base_altura10anos_SG$WHD110),]
summary(NH_filtro_narel_SG_3)
str(NH_filtro_narel_SG_3)
#Porcentagem dos valores faltantes após exclusão dos NAs
round(mean(is.na(NH_filtro_narel_SG_3$dmdeduc2)),digits=3)# 0% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$dmdmartl)),digits=3)# 1% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$indhhinc)),digits=3)# 6% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$ridexprg)),digits=3)# 77.6% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$WHD010)),digits=3)# 1.4% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$WHD020)),digits=3)# 1% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$WHD050)),digits=3)# 1% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$WHD120)),digits=3)# 2.7% - imputação
round(mean(is.na(NH_filtro_narel_SG_3$WHD130)),digits=3)# 1.2% - imputação
# Criando base de dados para imputação PMM|RF
##### Utilizei para imputar valores categoricos
##### o classificador randon forest do mice
##### temos outra sugestão?
NH_filtro_narel_SG_3$sddsrvyr <- as.factor(NH_filtro_narel_SG_3$sddsrvyr)
NH_filtro_narel_SG_3$riagendr <- as.factor(NH_filtro_narel_SG_3$riagendr)
NH_filtro_narel_SG_3$ridreth1 <- as.factor(NH_filtro_narel_SG_3$ridreth1)
NH_filtro_narel_SG_3$dmdeduc2 <- as.factor(NH_filtro_narel_SG_3$dmdeduc2)
NH_filtro_narel_SG_3$dmdmartl <- as.factor(NH_filtro_narel_SG_3$dmdmartl)
NH_filtro_narel_SG_3$indhhinc <- as.factor(NH_filtro_narel_SG_3$indhhinc)
NH_filtro_narel_SG_3$dmdhhsiz <- as.factor(NH_filtro_narel_SG_3$dmdhhsiz)
NH_filtro_narel_SG_3$ridexprg <- as.factor(NH_filtro_narel_SG_3$ridexprg)
str(NH_filtro_narel_SG_3)
# imputação PMM|RF
# considera-se que o valores faltantes nestas proporções seguem
# o comportamento Missing At Random(MAR) por serem
# valores baixos e por não apresentarem padrões de falta
#retirando faltantes da 110
imp_pmm_SG <- NH_filtro_narel_SG_3
summary(imp_pmm_SG)
# set.seed(42)
# my_imp_SG <- mice(imp_pmm_SG, m = 5,
#                  method = c("","","","","","rf","rf","","rf",
#                             "","pmm","pmm","pmm","pmm","pmm",
#                             "pmm","pmm","pmm"), maxit = 5)
#
# nhanes.comp <- complete(my_imp_SG, "long", include = TRUE)
write.csv(nhanes.comp, file = "nhanes.comp.csv")
nhanes.comp <- read.csv("nhanes.comp.csv")
#diagnostico das imputações multiplas de WHD050 - MELHORES: 4 e 5
summary(NH_filtro_narel_SG_3$WHD050)
with(my_imp_SG, mean(WHD050))
nhanes.comp$WHD050.NA <- cci(NH_filtro_narel_SG_3$WHD050)
#retirando faltantes da 110
imp_pmm_SG <- NH_filtro_narel_SG_3
summary(imp_pmm_SG)
# diagnostico de imputações de WHD010 - MELHORES: TODOS
summary(NH_filtro_narel_SG_3$WHD010)
with(my_imp_SG, mean(WHD010))
set.seed(42)
my_imp_SG <- mice(imp_pmm_SG, m = 5,
method = c("","","","","","rf","rf","","rf",
"","pmm","pmm","pmm","pmm","pmm",
"pmm","pmm","pmm"), maxit = 5)
nhanes.comp <- complete(my_imp_SG, "long", include = TRUE)
write.csv(my_imp_SG, file = "my_imp_SG.csv")
write.csv(nhanes.comp, file = "nhanes.comp.csv")
nhanes.comp <- read.csv("my_imp_SG.csv")
# set.seed(42)
# my_imp_SG <- mice(imp_pmm_SG, m = 5,
#                  method = c("","","","","","rf","rf","","rf",
#                             "","pmm","pmm","pmm","pmm","pmm",
#                             "pmm","pmm","pmm"), maxit = 5)
#
# nhanes.comp <- complete(my_imp_SG, "long", include = TRUE)
write.csv(my_imp_SG, file = "my_imp_SG.csv")
# Melhor m aparente = 2
imp_pmm_SG_final <- complete(my_imp_SG, 5)
#sem imputação
summary(NH_filtro_narel_SG_3)
#com imputação pmm e rf
summary(imp_pmm_SG_final)
#peso atual
imp_pmm_SG_final$WHD020 = as.numeric(imp_pmm_SG_final$WHD020)
imp_pmm_SG_final$WHD020 <- imp_pmm_SG_final$WHD020*0.453592
imp_pmm_SG_final$WHD020 <- round(imp_pmm_SG_final$WHD020, digits = 2)
#peso 1 ano atrás
imp_pmm_SG_final$WHD050 = as.numeric(imp_pmm_SG_final$WHD050)
imp_pmm_SG_final$WHD050 <- imp_pmm_SG_final$WHD050*0.453592
imp_pmm_SG_final$WHD050 <- round(imp_pmm_SG_final$WHD050, digits = 2)
#peso 10 anos atrás
imp_pmm_SG_final$WHD110 = as.numeric(imp_pmm_SG_final$WHD110)
imp_pmm_SG_final$WHD110 <- imp_pmm_SG_final$WHD110*0.453592
imp_pmm_SG_final$WHD110 <- round(imp_pmm_SG_final$WHD110, digits = 2)
#peso aos 25 anos
imp_pmm_SG_final$WHD120 = as.numeric(imp_pmm_SG_final$WHD120)
imp_pmm_SG_final$WHD120 <- imp_pmm_SG_final$WHD120*0.453592
imp_pmm_SG_final$WHD120 <- round(imp_pmm_SG_final$WHD120, digits = 2)
#maior peso obtido na vida
imp_pmm_SG_final$WHD140 = as.numeric(imp_pmm_SG_final$WHD140)
imp_pmm_SG_final$WHD140 <- imp_pmm_SG_final$WHD140*0.453592
imp_pmm_SG_final$WHD140 <- round(imp_pmm_SG_final$WHD140, digits = 2)
imp_pmm_SG_final$WHD010 = as.numeric(imp_pmm_SG_final$WHD010)
imp_pmm_SG_final$WHD010 <- imp_pmm_SG_final$WHD010*0.0254
imp_pmm_SG_final$WHD010 <- round(imp_pmm_SG_final$WHD010, digits = 2)
imp_pmm_SG_final$WHD130 = as.numeric(imp_pmm_SG_final$WHD130)
imp_pmm_SG_final$WHD130 <- imp_pmm_SG_final$WHD130*0.0254
imp_pmm_SG_final$WHD130 <- round(imp_pmm_SG_final$WHD130, digits = 2)
#imc atual
imp_pmm_SG_final$imcatual <- (imp_pmm_SG_final$WHD020/(imp_pmm_SG_final$WHD010*imp_pmm_SG_final$WHD010))
imp_pmm_SG_final$imcatual <- round(imp_pmm_SG_final$imcatual, digits = 2)
#-
#imc um ano
imp_pmm_SG_final$imc1ano <- (imp_pmm_SG_final$WHD050/(imp_pmm_SG_final$WHD010*imp_pmm_SG_final$WHD010))
imp_pmm_SG_final$imc1ano <- round(imp_pmm_SG_final$imc1ano, digits = 2)
imp_pmm_SG_final$imc10ano <- (imp_pmm_SG_final$WHD110/(imp_pmm_SG_final$WHD010*imp_pmm_SG_final$WHD010))
imp_pmm_SG_final$imc10ano <- round(imp_pmm_SG_final$imc10ano, digits = 2)
#imc 25 anos
imp_pmm_SG_final$imc25ano <- (imp_pmm_SG_final$WHD120/(imp_pmm_SG_final$WHD010*imp_pmm_SG_final$WHD010))
imp_pmm_SG_final$imc25ano <- round(imp_pmm_SG_final$imc25ano, digits = 2)
imp_pmm_SG_final$imcmaior <- (imp_pmm_SG_final$WHD140/(imp_pmm_SG_final$WHD010*imp_pmm_SG_final$WHD010))
imp_pmm_SG_final$imcmaior <- round(imp_pmm_SG_final$imcmaior, digits = 2)
imp_pmm_SG_final$cimcatual = cut(imp_pmm_SG_final$imcatual, breaks=c(0,18.5, 25.0, 30.0, Inf), labels=c("baixo peso", "peso normal","sobrepeso", "obesidade"), right=FALSE)
imp_pmm_SG_final$cimc1ano = cut(imp_pmm_SG_final$imc1ano, breaks=c(0,18.5, 25.0, 30.0, Inf), labels=c("baixo peso", "peso normal","sobrepeso", "obesidade"), right=FALSE)
imp_pmm_SG_final$cimc10ano = cut(imp_pmm_SG_final$imc10ano, breaks=c(0,18.5, 25.0, 30.0, Inf), labels=c("baixo peso", "peso normal","sobrepeso", "obesidade"), right=FALSE)
imp_pmm_SG_final$cimc25ano = cut(imp_pmm_SG_final$imc25ano, breaks=c(0,18.5, 25.0, 30.0, Inf), labels=c("baixo peso", "peso normal","sobrepeso", "obesidade"), right=FALSE)
imp_pmm_SG_final$cimcmaior = cut(imp_pmm_SG_final$imcmaior, breaks=c(0,18.5, 25.0, 30.0, Inf), labels=c("baixo peso", "peso normal","sobrepeso", "obesidade"), right=FALSE)
NH_ABT_SG <- cbind(imp_pmm_SG_final$imcatual,
imp_pmm_SG_final$imc1ano,
imp_pmm_SG_final$imc10ano,
imp_pmm_SG_final$imc25ano,
imp_pmm_SG_final$ridageyr,
imp_pmm_SG_final$SEQN)
colnames(NH_ABT_SG) <- c('0','1','10','25','idade','SEQN')
# Empilhando
NHS_molted <- melt(NH_ABT_SG,id='SEQN', value.name = 'value')
NH_ABT_SG <- cbind(imp_pmm_SG_final$imcatual,
imp_pmm_SG_final$imc1ano,
imp_pmm_SG_final$imc10ano,
imp_pmm_SG_final$imc25ano,
imp_pmm_SG_final$ridageyr,
imp_pmm_SG_final$SEQN)
View(NH_ABT_SG)
colnames(NH_ABT_SG) <- c('0','1','10','25','idade','SEQN')
# Empilhando
NHS_molted <- melt(NH_ABT_SG,id='SEQN', value.name = 'value')
View(NHS_molted)
colnames(NHS_molted) <- c('id','tempo','imc')
NHS_molted
NHS_molted$idade = 0
NHS_molted$SEQN = 0
listaDeIdades <- subset(NHS_molted, NHS_molted$tempo == "idade")
View(listaDeIdades)
for (row in 1:nrow(listaDeIdades)) {
id <- listaDeIdades[row, "id"]
idade <- listaDeIdades[row, "imc"]
NHS_molted$idade[NHS_molted$id == id] <- idade
}
View(NHS_molted)
listaDeSequences <- subset(NHS_molted, NHS_molted$tempo == "SEQN")
for (row in 1:nrow(listaDeSequences)) {
id <- listaDeSequences[row, "id"]
sqn <- listaDeSequences[row, "imc"]
NHS_molted$SEQN[NHS_molted$id == id] <- sqn
}
# Retirando idade e SEQN do empilhamento
no_idade <- subset(NHS_molted, NHS_molted$tempo != "idade")
View(NHS_molted)
# Retirando idade e SEQN do empilhamento
no_idade <- subset(NHS_molted, NHS_molted$tempo != "idade")
NHS_molted_fil <- subset(no_idade, no_idade$tempo != "SEQN")
View(NHS_molted_fil)
NHS_molted_fil$tempo <- as.numeric(as.character(NHS_molted_fil$tempo))
NHS_molted_fil$idadedoimc <- ifelse(NHS_molted_fil$tempo == 25, 25,
NHS_molted_fil$idade - NHS_molted_fil$tempo)
NHS_molted_fil$idadedoimc <- as.factor(NHS_molted_fil$idadedoimc)
model <- lmer(imc ~ idadedoimc +( 1 | id), data=NHS_molted_fil)
summary(model)
tab_model(model)
sjPlot::plot_model(model,
colors = "Accent",
show.values = TRUE,
value.offset = .4,
value.size = 4,
dot.size = 3,
line.size = 1,
vline.color = "blue",
width = 1.5)
#diagnostico das imputações multiplas de WHD120 - MELHORES: 4 e 5
summary(NH_filtro_narel_SG_3$WHD120)
with(my_imp_SG, mean(WHD120)) #similares
nhanes.comp$WHD120.NA <- cci(NH_filtro_narel_SG_3$WHD120)
ggplot(nhanes.comp,
aes(x = .imp, y = WHD120 , color = WHD120.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
#diagnostico das imputações multiplas de WHD130 - MELHORES: 1, 2 e 5
summary(NH_filtro_narel_SG_3$WHD130)
with(my_imp_SG, mean(WHD130)) #consistentes: 1,2 e 5
nhanes.comp$WHD130.NA <- cci(NH_filtro_narel_SG_3$WHD130)
ggplot(nhanes.comp,
aes(x = .imp, y = WHD130 , color = WHD130.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# diagnostico de imputações de WHD010 - MELHORES: TODOS
summary(NH_filtro_narel_SG_3$WHD010)
with(my_imp_SG, mean(WHD010))
nhanes.comp$WHD010.NA <- cci(NH_filtro_narel_SG_3$WHD010)
ggplot(nhanes.comp,
aes(x = .imp, y = WHD010 , color = WHD010.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
#diagnostico das imputações multiplas de WHD020 - MELHORES: TODOS (atenção ao 2)
summary(NH_filtro_narel_SG_3$WHD020)
with(my_imp_SG, mean(WHD020))
nhanes.comp$WHD020.NA <- cci(NH_filtro_narel_SG_3$WHD020)
ggplot(nhanes.comp,
aes(x = .imp, y = WHD020 , color = WHD020.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
#diagnostico das imputações multiplas de WHD050 - MELHORES: 4 e 5
summary(NH_filtro_narel_SG_3$WHD050)
with(my_imp_SG, mean(WHD050))
nhanes.comp$WHD050.NA <- cci(NH_filtro_narel_SG_3$WHD050)
ggplot(nhanes.comp,
aes(x = .imp, y = WHD050 , color = WHD050.NA)) +
geom_jitter(show.legend = FALSE,
width = .1)
# diagnostico de imputações de WHD010 - MELHORES: TODOS
summary(NH_filtro_narel_SG_3$WHD010)
# diagnostico de imputações de WHD010 - MELHORES: TODOS
summary(NH_filtro_narel_SG_3$WHD010)
# diagnostico de imputações de WHD010 - MELHORES: TODOS
summary(NH_filtro_narel_SG_3$WHD010)
# diagnostico de imputações de WHD010 - MELHORES: TODOS
summary(NH_filtro_narel_SG_3$WHD010)
with(my_imp_SG, mean(WHD010))
#sem imputação
summary(NH_filtro_narel_SG_3)
#com imputação pmm e rf
summary(imp_pmm_SG_final)
NH_ABT_SG <- cbind(imp_pmm_SG_final$imcatual,
imp_pmm_SG_final$imc1ano,
imp_pmm_SG_final$imc10ano,
imp_pmm_SG_final$imc25ano,
imp_pmm_SG_final$ridageyr,
imp_pmm_SG_final$SEQN)
colnames(NH_ABT_SG) <- c('0','1','10','25','idade','SEQN')
View(my_imp_SG)
View(NH_ABT_SG)
# Empilhando
NHS_molted <- melt(NH_ABT_SG,id='SEQN', value.name = 'value')
colnames(NHS_molted) <- c('id','tempo','imc')
View(NHS_molted)
NHS_molted$idade = 0
NHS_molted$SEQN = 0
listaDeIdades <- subset(NHS_molted, NHS_molted$tempo == "idade")
for (row in 1:nrow(listaDeIdades)) {
id <- listaDeIdades[row, "id"]
idade <- listaDeIdades[row, "imc"]
NHS_molted$idade[NHS_molted$id == id] <- idade
}
listaDeSequences <- subset(NHS_molted, NHS_molted$tempo == "SEQN")
for (row in 1:nrow(listaDeSequences)) {
id <- listaDeSequences[row, "id"]
sqn <- listaDeSequences[row, "imc"]
NHS_molted$SEQN[NHS_molted$id == id] <- sqn
}
# Retirando idade e SEQN do empilhamento
no_idade <- subset(NHS_molted, NHS_molted$tempo != "idade")
NHS_molted_fil <- subset(no_idade, no_idade$tempo != "SEQN")
View(NHS_molted_fil)
NHS_molted_fil$tempo <- as.numeric(as.character(NHS_molted_fil$tempo))
NHS_molted_fil$idadedoimc <- ifelse(NHS_molted_fil$tempo == 25, 25,
NHS_molted_fil$idade - NHS_molted_fil$tempo)
NHS_molted_fil$idadedoimc <- as.factor(NHS_molted_fil$idadedoimc)
table(NHS_molted_fil$idadedoimc) #muitos valores com 25 anos
#Fitting the model
#quais as diferenteças das formulas dos fits?
model <- lmer(imc ~ idadedoimc +( 1 | id), data=NHS_molted_fil)
summary(model)
tab_model(model)
sjPlot::plot_model(model,
colors = "Accent",
show.values = TRUE,
value.offset = .4,
value.size = 4,
dot.size = 3,
line.size = 1,
vline.color = "blue",
width = 1.5)
# Pacotes utilizados nesta analise
library(foreign)
library(tidyverse)
library(anchors)
setwd("C:/Users/Cacau Pastorello/Desktop/NHANES_DEBORA/Bancos ano a ano")
setwd("C:/Users/Cacau Pastorello/Desktop/NHANES_DEBORA/Bancos ano a ano")
DM9900 <- read.xport("DEMO.XPT")
DM0102 <- read.xport("DEMO_B.XPT")
DM0304 <- read.xport("DEMO_C.XPT")
DM0506 <- read.xport("DEMO_D.XPT")
DM0708 <- read.xport("DEMO_E.XPT")
DM0910 <- read.xport("DEMO_F.XPT")
DM1112 <- read.xport("DEMO_G.XPT")
DM1314 <- read.xport("DEMO_H.XPT")
DM1516 <- read.xport("DEMO_I.XPT")
DM1718 <- read.xport("DEMO_J.XPT")
